// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Walmad.Core.src.Entity;
using Walmad.WebAPI.src.Database;

#nullable disable

namespace Walmad.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "pending", "processing", "shipping", "shipped", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Walmad.Core.src.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebab49d3-3549-417d-bbb1-bf9bb067fccf"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6071),
                            Image = "https://picsum.photos/200",
                            Name = "Electronic",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6262)
                        },
                        new
                        {
                            Id = new Guid("e8f3ab8e-525f-4596-8226-d348ef4ab56a"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6434),
                            Image = "https://picsum.photos/200",
                            Name = "Clothing",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6435)
                        },
                        new
                        {
                            Id = new Guid("dbcc2bd6-945a-4ee3-83f9-7a511ac7e8ec"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6437),
                            Image = "https://picsum.photos/200",
                            Name = "Home Decor",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6437)
                        },
                        new
                        {
                            Id = new Guid("3c629d75-5183-452a-8dba-515067f4a837"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6439),
                            Image = "https://picsum.photos/200",
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6439)
                        },
                        new
                        {
                            Id = new Guid("4728694e-385e-4463-8c31-44c60dc38c24"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6441),
                            Image = "https://picsum.photos/200",
                            Name = "Sports",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6441)
                        },
                        new
                        {
                            Id = new Guid("69bfa267-b8c6-4d13-9fa2-3dd841682958"),
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6442),
                            Image = "https://picsum.photos/200",
                            Name = "Toys",
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 194, DateTimeKind.Utc).AddTicks(6443)
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("OrderId1")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id1");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_products");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_products_order_id");

                    b.HasIndex("OrderId1")
                        .HasDatabaseName("ix_order_products_order_id1");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", null, t =>
                        {
                            t.HasCheckConstraint("CHK_OrderProduct_Quantity_Positive", "quantity >= 0");
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CategoryId1")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("CategoryId1")
                        .HasDatabaseName("ix_products_category_id1");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Product_Inventory_Positive", "inventory >= 0");

                            t.HasCheckConstraint("CHK_Product_Price_Positive", "price >= 0");
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id1");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_product_images");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_images_product_id");

                    b.HasIndex("ProductId1")
                        .HasDatabaseName("ix_product_images_product_id1");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id1");

                    b.Property<Guid?>("ProductId2")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id2");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("ProductId1")
                        .HasDatabaseName("ix_reviews_product_id1");

                    b.HasIndex("ProductId2")
                        .HasDatabaseName("ix_reviews_product_id2");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_reviews_user_id1");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("PostCode")
                        .HasColumnType("integer")
                        .HasColumnName("post_code");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6174f173-d035-4ed2-81e6-84fdcfd588f4"),
                            AddressLine1 = "Olympiakatu 12",
                            AddressLine2 = "C1",
                            Avatar = "https://picsum.photos/200",
                            City = "Vaasa",
                            Country = "Finland",
                            CreatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 426, DateTimeKind.Utc).AddTicks(3025),
                            Email = "superadmin@gmail.com",
                            Name = "SuperAdmin",
                            Password = "FA-E6-9B-F2-E0-7C-96-96-EC-01-13-7A-A4-19-32-C9-63-B8-49-34-6A-68-33-D7-3C-4D-22-DF-75-DC-C2-ED",
                            PostCode = 65100,
                            Role = Role.Admin,
                            Salt = new byte[] { 166, 62, 16, 174, 235, 140, 75, 93, 118, 35, 210, 130, 27, 221, 153, 13, 196, 83, 117, 11, 46, 251, 65, 123, 61, 157, 63, 186, 76, 200, 217, 12, 1, 182, 246, 170, 74, 7, 156, 95, 87, 24, 119, 170, 13, 191, 4, 9, 243, 228, 130, 115, 143, 51, 60, 151, 237, 20, 0, 209, 22, 187, 59, 23 },
                            UpdatedAt = new DateTime(2023, 12, 23, 18, 1, 41, 426, DateTimeKind.Utc).AddTicks(3029)
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.OrderProduct", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("Walmad.Core.src.Entity.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_order_products_orders_order_id1");

                    b.HasOne("Walmad.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("Walmad.Core.src.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_products_categories_category_id1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.ProductImage", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_images_products_product_id");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_product_images_products_product_id1");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Review", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_products_product_id1");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_products_product_id2");

                    b.HasOne("Walmad.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.HasOne("Walmad.Core.src.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_users_user_id1");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
