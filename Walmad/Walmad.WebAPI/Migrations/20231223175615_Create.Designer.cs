// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Walmad.Core.src.Entity;
using Walmad.WebAPI.src.Database;

#nullable disable

namespace Walmad.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231223175615_Create")]
    partial class Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "pending", "processing", "shipping", "shipped", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Walmad.Core.src.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5846635c-a18b-4dfa-89c7-c75ca344166e"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 168, DateTimeKind.Utc).AddTicks(9771),
                            Image = "https://picsum.photos/200",
                            Name = "Electronic",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 168, DateTimeKind.Utc).AddTicks(9962)
                        },
                        new
                        {
                            Id = new Guid("8db6d526-c334-4344-b621-f0361ba73fa6"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(144),
                            Image = "https://picsum.photos/200",
                            Name = "Clothing",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(145)
                        },
                        new
                        {
                            Id = new Guid("b70991de-ee61-4958-80ac-1495bc3ad818"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(147),
                            Image = "https://picsum.photos/200",
                            Name = "Home Decor",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(147)
                        },
                        new
                        {
                            Id = new Guid("e37711a1-d081-4d6e-8c29-d359ea592686"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(149),
                            Image = "https://picsum.photos/200",
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(149)
                        },
                        new
                        {
                            Id = new Guid("e21c44ba-9872-414b-aa3a-ab95ae33c1c3"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(151),
                            Image = "https://picsum.photos/200",
                            Name = "Sports",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(151)
                        },
                        new
                        {
                            Id = new Guid("4604008c-d068-4da0-b1e6-c27be53967d8"),
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(153),
                            Image = "https://picsum.photos/200",
                            Name = "Toys",
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 169, DateTimeKind.Utc).AddTicks(153)
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<OrderStatus>("OrderStatus")
                        .HasColumnType("order_status")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("OrderId1")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id1");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_products");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_products_order_id");

                    b.HasIndex("OrderId1")
                        .HasDatabaseName("ix_order_products_order_id1");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", null, t =>
                        {
                            t.HasCheckConstraint("CHK_OrderProduct_Quantity_Positive", "quantity >= 0");
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CategoryId1")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("CategoryId1")
                        .HasDatabaseName("ix_products_category_id1");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Product_Inventory_Positive", "inventory >= 0");

                            t.HasCheckConstraint("CHK_Product_Price_Positive", "price >= 0");
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id1");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_product_images");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_images_product_id");

                    b.HasIndex("ProductId1")
                        .HasDatabaseName("ix_product_images_product_id1");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id1");

                    b.Property<Guid?>("ProductId2")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id2");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("ProductId1")
                        .HasDatabaseName("ix_reviews_product_id1");

                    b.HasIndex("ProductId2")
                        .HasDatabaseName("ix_reviews_product_id2");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_reviews_user_id1");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("PostCode")
                        .HasColumnType("integer")
                        .HasColumnName("post_code");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb9b9aaa-6360-4dea-ad37-04aaf0805e94"),
                            AddressLine1 = "Olympiakatu 12",
                            AddressLine2 = "C1",
                            Avatar = "https://picsum.photos/200",
                            City = "Vaasa",
                            Country = "Finland",
                            CreatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 373, DateTimeKind.Utc).AddTicks(7455),
                            Email = "superadmin@gmail.com",
                            Name = "SuperAdmin",
                            Password = "30-83-DA-AD-F3-8A-A7-6C-7A-18-E8-54-4F-21-2D-F4-ED-CF-40-3B-77-CA-AA-F1-A7-D5-A0-28-12-FC-C9-AE",
                            PostCode = 65100,
                            Role = Role.Admin,
                            Salt = new byte[] { 154, 143, 207, 81, 100, 167, 203, 93, 219, 193, 99, 228, 110, 145, 18, 132, 252, 238, 69, 219, 19, 141, 17, 23, 77, 35, 118, 173, 93, 132, 249, 155, 141, 158, 222, 230, 13, 188, 214, 138, 21, 15, 34, 132, 166, 159, 21, 59, 122, 203, 102, 56, 183, 124, 139, 94, 151, 164, 183, 93, 30, 112, 153, 250 },
                            UpdatedAt = new DateTime(2023, 12, 23, 17, 56, 15, 373, DateTimeKind.Utc).AddTicks(7456)
                        });
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.OrderProduct", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("Walmad.Core.src.Entity.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_order_products_orders_order_id1");

                    b.HasOne("Walmad.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("Walmad.Core.src.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_products_categories_category_id1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.ProductImage", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_images_products_product_id");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_product_images_products_product_id1");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Review", b =>
                {
                    b.HasOne("Walmad.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_products_product_id1");

                    b.HasOne("Walmad.Core.src.Entity.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_products_product_id2");

                    b.HasOne("Walmad.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.HasOne("Walmad.Core.src.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_reviews_users_user_id1");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Walmad.Core.src.Entity.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
